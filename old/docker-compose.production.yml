# Production Docker Compose for AWS Lightsail
# This configuration allows for rolling updates without SSH access

version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: aiboa_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - web_content:/usr/share/nginx/html
      - nginx_config:/etc/nginx/conf.d
      - ssl_certs:/etc/nginx/ssl
    depends_on:
      - auth_service
      - transcription_service
      - analysis_service
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth_service:
    image: aiboa/auth:latest
    container_name: aiboa_auth
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aiboa
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  transcription_service:
    image: aiboa/transcription:latest
    container_name: aiboa_transcription
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STORAGE_PATH=/data
    volumes:
      - app_data:/data
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analysis_service:
    image: aiboa/analysis:latest
    container_name: aiboa_analysis
    ports:
      - "8001:8001"
    environment:
      - SOLAR_API_KEY=${SOLAR_API_KEY}
      - UPSTAGE_API_KEY=${UPSTAGE_API_KEY}
      - STORAGE_PATH=/data
    volumes:
      - app_data:/data
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: aiboa_postgres
    environment:
      - POSTGRES_DB=aiboa
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: aiboa_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aiboa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  file_updater:
    image: alpine/curl
    container_name: aiboa_file_updater
    volumes:
      - web_content:/web_content
      - ./updates:/updates
    command: |
      sh -c "
        while true; do
          if [ -f /updates/index.html ]; then
            echo 'Updating web content...'
            cp /updates/index.html /web_content/index.html
            echo 'Web content updated at $(date)'
            rm /updates/index.html
          fi
          sleep 30
        done
      "
    restart: unless-stopped
    networks:
      - aiboa_network

networks:
  aiboa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16

volumes:
  web_content:
    driver: local
  nginx_config:
    driver: local
  ssl_certs:
    driver: local
  app_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local