const { chromium } = require('playwright');

async function extractYouTubeCaptions(videoUrl) {
    const browser = await chromium.launch({ 
        headless: true  // Run headless for actual extraction
    });
    
    const context = await browser.newContext({
        viewport: { width: 1280, height: 720 },
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    });
    
    const page = await context.newPage();
    
    console.log('üé¨ Extracting captions from:', videoUrl);
    
    try {
        await page.goto(videoUrl, { waitUntil: 'networkidle' });
        await page.waitForSelector('#movie_player', { timeout: 10000 });
        await page.waitForTimeout(3000);
        
        // Extract ytInitialPlayerResponse data
        const playerResponse = await page.evaluate(() => {
            const scripts = document.querySelectorAll('script');
            for (let script of scripts) {
                const content = script.textContent;
                if (content && content.includes('ytInitialPlayerResponse')) {
                    const match = content.match(/ytInitialPlayerResponse\s*=\s*({.+?});/);
                    if (match) {
                        try {
                            return JSON.parse(match[1]);
                        } catch (e) {
                            return null;
                        }
                    }
                }
            }
            return null;
        });
        
        if (!playerResponse) {
            throw new Error('Could not extract player response data');
        }
        
        const captions = playerResponse?.captions?.playerCaptionsTracklistRenderer?.captionTracks;
        if (!captions || captions.length === 0) {
            throw new Error('No caption tracks found');
        }
        
        console.log(`‚úÖ Found ${captions.length} caption track(s)`);
        
        const results = [];
        
        for (const [index, caption] of captions.entries()) {
            console.log(`\nüìù Processing caption track ${index + 1}:`);
            console.log(`   Language: ${caption.languageCode} (${caption.name?.simpleText})`);
            console.log(`   Auto-generated: ${caption.kind === 'asr' ? 'Yes' : 'No'}`);
            
            try {
                // Fetch caption data
                const response = await page.request.get(caption.baseUrl);
                if (!response.ok()) {
                    console.log(`   ‚ùå Failed to fetch: ${response.status()}`);
                    continue;
                }
                
                const xmlContent = await response.text();
                console.log(`   ‚úÖ Successfully fetched (${xmlContent.length} chars)`);
                
                // Parse XML to extract text and timestamps
                const textMatches = xmlContent.match(/<text[^>]*start="([^"]*)"[^>]*dur="([^"]*)"[^>]*>([^<]*)<\/text>/g);
                
                if (textMatches) {
                    const captions = textMatches.map(match => {
                        const startMatch = match.match(/start="([^"]*)"/);
                        const durMatch = match.match(/dur="([^"]*)"/);
                        const textMatch = match.match(/>([^<]*)</);
                        
                        return {
                            start: startMatch ? parseFloat(startMatch[1]) : 0,
                            duration: durMatch ? parseFloat(durMatch[1]) : 0,
                            text: textMatch ? textMatch[1].replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').trim() : ''
                        };
                    }).filter(caption => caption.text.length > 0);
                    
                    console.log(`   üìä Extracted ${captions.length} caption segments`);
                    
                    // Show first few captions as sample
                    console.log(`   üìÑ Sample captions:`);
                    captions.slice(0, 5).forEach((cap, i) => {
                        const timestamp = new Date(cap.start * 1000).toISOString().substr(11, 8);
                        console.log(`      ${timestamp}: "${cap.text}"`);
                    });
                    
                    results.push({
                        language: caption.languageCode,
                        languageName: caption.name?.simpleText,
                        autoGenerated: caption.kind === 'asr',
                        captions: captions,
                        totalSegments: captions.length,
                        xmlContent: xmlContent
                    });
                } else {
                    console.log(`   ‚ùå No caption segments found in XML`);
                }
                
            } catch (error) {
                console.log(`   ‚ùå Error processing caption: ${error.message}`);
            }
        }
        
        console.log(`\nüèÜ Successfully extracted captions from ${results.length} track(s)`);
        return results;
        
    } catch (error) {
        console.error('‚ùå Caption extraction failed:', error.message);
        return null;
    } finally {
        await browser.close();
    }
}

// Test with the specific video
async function main() {
    const videoUrl = 'https://www.youtube.com/watch?v=-OLCt6WScEY&list=PLugIxwJYmOhl_8KO3GHx9gp6VKMmbsTfw';
    
    const results = await extractYouTubeCaptions(videoUrl);
    
    if (results && results.length > 0) {
        // Save results to JSON file for analysis
        const fs = require('fs').promises;
        await fs.writeFile(
            '/Users/jihunkong/teaching_analize/frontend/pages/extracted_captions.json',
            JSON.stringify(results, null, 2)
        );
        console.log('\nüíæ Results saved to: extracted_captions.json');
        
        // Create a simple text transcript
        for (const [index, result] of results.entries()) {
            const transcriptText = result.captions.map(cap => cap.text).join(' ');
            await fs.writeFile(
                `/Users/jihunkong/teaching_analize/frontend/pages/transcript_${result.language}_${index + 1}.txt`,
                transcriptText
            );
            console.log(`üíæ Transcript saved to: transcript_${result.language}_${index + 1}.txt`);
        }
    }
}

main().catch(console.error);