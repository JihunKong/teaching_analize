/**
 * PDF Settings Component
 * 
 * Global PDF export settings management including:
 * - Default PDF format preferences
 * - Quality settings
 * - Template customization options
 * - Export history management
 * - Performance optimization settings
 */

import React, { useState, useCallback } from 'react'
import { Button } from '../ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { Input } from '../ui/input'
import { Label } from '../ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'
import { Checkbox } from '../ui/checkbox'
import { Slider } from '../ui/slider'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'
import { Badge } from '../ui/badge'
import { Alert, AlertDescription } from '../ui/alert'
import {
  Settings,
  Download,
  FileText,
  Clock,
  Trash2,
  RotateCcw,
  Save,
  Eye,
  History,
  Palette,
  Zap,
  HardDrive,
  Info
} from 'lucide-react'
import usePDFExport from '../../hooks/usePDFExport'

interface PDFExportOptions {
  format: 'A4' | 'A3' | 'Letter' | 'Legal'
  quality: 'low' | 'medium' | 'high' | 'ultra'
  dpi: number
  includeCharts: boolean
  includeMetadata: boolean
  watermark?: { text: string; opacity: number }
}
import { DEFAULT_PDF_OPTIONS, pdfExportUtils } from '../../lib/pdf-export'

export interface PDFSettingsProps {
  className?: string
  onSettingsChange?: (settings: any) => void
}

const PDFSettings: React.FC<PDFSettingsProps> = ({
  className = '',
  onSettingsChange
}) => {
  const {
    exportState,
    updateSettings,
    resetSettings,
    getHistory,
    clearHistory,
    deleteHistoryItem,
    downloadFromHistory,
    historyCount
  } = usePDFExport()

  const [defaultOptions, setDefaultOptions] = useState<any>(
    exportState.settings.defaultOptions
  )
  const [showAdvanced, setShowAdvanced] = useState(false)
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)

  const history = getHistory()

  const handleDefaultOptionChange = useCallback(<K extends keyof PDFExportOptions>(
    key: K,
    value: PDFExportOptions[K]
  ) => {
    setDefaultOptions((prev: any) => ({ ...prev, [key]: value }))
    setHasUnsavedChanges(true)
  }, [])

  const handleMarginChange = useCallback((side: string, value: number) => {
    setDefaultOptions((prev: any) => ({
      ...prev,
      margin: { ...prev.margin, [side]: value }
    }))
    setHasUnsavedChanges(true)
  }, [])

  const handleSettingChange = useCallback(<K extends keyof typeof exportState.settings>(
    key: K,
    value: typeof exportState.settings[K]
  ) => {
    updateSettings({ [key]: value })
    onSettingsChange?.({ [key]: value })
  }, [updateSettings, onSettingsChange])

  const handleSaveSettings = useCallback(() => {
    updateSettings({ defaultOptions })
    setHasUnsavedChanges(false)
    onSettingsChange?.({ defaultOptions })
  }, [defaultOptions, updateSettings, onSettingsChange])

  const handleResetToDefaults = useCallback(() => {
    setDefaultOptions(DEFAULT_PDF_OPTIONS)
    resetSettings()
    setHasUnsavedChanges(false)
    onSettingsChange?.({ reset: true })
  }, [resetSettings, onSettingsChange])

  const handleQuickPreset = useCallback((type: string) => {
    const presetOptions = pdfExportUtils.getReportTypeOptions(type as any)
    setDefaultOptions((prev: any) => ({ ...prev, ...presetOptions }))
    setHasUnsavedChanges(true)
  }, [])

  const formatFileSize = (bytes: number): string => {
    const units = ['B', 'KB', 'MB', 'GB']
    let size = bytes
    let unitIndex = 0
    
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024
      unitIndex++
    }
    
    return `${size.toFixed(1)} ${units[unitIndex]}`
  }

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getTotalHistorySize = (): number => {
    return history.reduce((total, item) => total + item.fileSize, 0)
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">PDF 내보내기 설정</h2>
          <p className="text-gray-600">PDF 내보내기 기본 설정을 관리합니다.</p>
        </div>
        
        <div className="flex items-center space-x-2">
          {hasUnsavedChanges && (
            <Badge variant="secondary">저장되지 않은 변경사항</Badge>
          )}
          
          <Button
            variant="outline"
            onClick={handleResetToDefaults}
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            초기화
          </Button>
          
          <Button
            onClick={handleSaveSettings}
            disabled={!hasUnsavedChanges}
          >
            <Save className="w-4 h-4 mr-2" />
            설정 저장
          </Button>
        </div>
      </div>

      <Tabs defaultValue="defaults" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="defaults" className="flex items-center space-x-1">
            <FileText className="w-4 h-4" />
            <span>기본 설정</span>
          </TabsTrigger>
          <TabsTrigger value="behavior" className="flex items-center space-x-1">
            <Settings className="w-4 h-4" />
            <span>동작 설정</span>
          </TabsTrigger>
          <TabsTrigger value="history" className="flex items-center space-x-1">
            <History className="w-4 h-4" />
            <span>내보내기 기록</span>
          </TabsTrigger>
          <TabsTrigger value="performance" className="flex items-center space-x-1">
            <Zap className="w-4 h-4" />
            <span>성능</span>
          </TabsTrigger>
        </TabsList>

        {/* Default Settings Tab */}
        <TabsContent value="defaults" className="space-y-6">
          {/* Quick Presets */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">빠른 설정</CardTitle>
              <CardDescription>
                보고서 유형별 최적화된 설정을 빠르게 적용할 수 있습니다.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  className="h-auto p-3 flex-col"
                  onClick={() => handleQuickPreset('comprehensive')}
                >
                  <FileText className="w-6 h-6 mb-2" />
                  <span className="text-xs">종합 보고서</span>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="h-auto p-3 flex-col"
                  onClick={() => handleQuickPreset('summary')}
                >
                  <Zap className="w-6 h-6 mb-2" />
                  <span className="text-xs">요약 보고서</span>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="h-auto p-3 flex-col"
                  onClick={() => handleQuickPreset('actionPlan')}
                >
                  <Settings className="w-6 h-6 mb-2" />
                  <span className="text-xs">실행 계획서</span>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="h-auto p-3 flex-col"
                  onClick={() => handleQuickPreset('comparison')}
                >
                  <Eye className="w-6 h-6 mb-2" />
                  <span className="text-xs">비교 분석</span>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Format Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">페이지 형식</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label>페이지 크기</Label>
                  <Select
                    value={defaultOptions.format}
                    onValueChange={(value) => setDefaultOptions((prev: any) => ({ ...prev, 'format': value })))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="A4">A4 (210×297mm)</SelectItem>
                      <SelectItem value="Letter">Letter (216×279mm)</SelectItem>
                      <SelectItem value="A3">A3 (297×420mm)</SelectItem>
                      <SelectItem value="Legal">Legal (216×356mm)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>방향</Label>
                  <Select
                    value={defaultOptions.orientation}
                    onValueChange={(value) => setDefaultOptions((prev: any) => ({ ...prev, orientation: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="portrait">세로</SelectItem>
                      <SelectItem value="landscape">가로</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>품질</Label>
                  <Select
                    value={defaultOptions.quality}
                    onValueChange={(value) => setDefaultOptions((prev: any) => ({ ...prev, 'quality': value })))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">낮음 (빠름)</SelectItem>
                      <SelectItem value="medium">보통</SelectItem>
                      <SelectItem value="high">높음</SelectItem>
                      <SelectItem value="ultra">최고 (느림)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Margins */}
              <div className="space-y-4">
                <Label>여백 설정 (mm)</Label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm">상단</Label>
                    <Input
                      type="number"
                      value={defaultOptions.margin.top}
                      onChange={(e) => handleMarginChange('top', parseInt(e.target.value) || 0)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm">하단</Label>
                    <Input
                      type="number"
                      value={defaultOptions.margin.bottom}
                      onChange={(e) => handleMarginChange('bottom', parseInt(e.target.value) || 0)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm">좌측</Label>
                    <Input
                      type="number"
                      value={defaultOptions.margin.left}
                      onChange={(e) => handleMarginChange('left', parseInt(e.target.value) || 0)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm">우측</Label>
                    <Input
                      type="number"
                      value={defaultOptions.margin.right}
                      onChange={(e) => handleMarginChange('right', parseInt(e.target.value) || 0)}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Content Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">콘텐츠 설정</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <h4 className="font-medium">페이지 요소</h4>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.includePageNumbers}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'includePageNumbers': checked })))}
                      />
                      <Label>페이지 번호 포함</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.includeHeader}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'includeHeader': checked })))}
                      />
                      <Label>머리글 포함</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.includeFooter}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'includeFooter': checked })))}
                      />
                      <Label>바닥글 포함</Label>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-medium">콘텐츠 옵션</h4>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.includeCharts}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'includeCharts': checked })))}
                      />
                      <Label>차트 및 그래프 포함</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.koreanFont}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'koreanFont': checked })))}
                      />
                      <Label>한글 폰트 지원</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={defaultOptions.breakPages}
                        onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'breakPages': checked })))}
                      />
                      <Label>자동 페이지 나누기</Label>
                    </div>
                  </div>
                </div>
              </div>

              {/* Font Family */}
              {defaultOptions.koreanFont && (
                <div className="space-y-2">
                  <Label>기본 폰트</Label>
                  <Input
                    value={defaultOptions.fontFamily || ''}
                    onChange={(e) => setDefaultOptions((prev: any) => ({ ...prev, 'fontFamily', e.target.value)}
                    placeholder="예: NanumGothic, Arial, sans-serif"
                  />
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Behavior Settings Tab */}
        <TabsContent value="behavior" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-base">내보내기 동작</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={exportState.settings.autoDownload}
                    onCheckedChange={(checked) => handleSettingChange('autoDownload': checked })))}
                  />
                  <Label>PDF 생성 후 자동 다운로드</Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={exportState.settings.enablePreview}
                    onCheckedChange={(checked) => handleSettingChange('enablePreview': checked })))}
                  />
                  <Label>미리보기 기능 사용</Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={exportState.settings.showProgressDialog}
                    onCheckedChange={(checked) => handleSettingChange('showProgressDialog': checked })))}
                  />
                  <Label>진행률 대화상자 표시</Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={exportState.settings.keepHistory}
                    onCheckedChange={(checked) => handleSettingChange('keepHistory': checked })))}
                  />
                  <Label>내보내기 기록 보관</Label>
                </div>
              </div>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>최대 재시도 횟수</Label>
                  <Input
                    type="number"
                    min="0"
                    max="10"
                    value={exportState.settings.maxRetries}
                    onChange={(e) => handleSettingChange('maxRetries', parseInt(e.target.value) || 3)}
                  />
                </div>

                <div className="space-y-2">
                  <Label>재시도 대기 시간 (초)</Label>
                  <Input
                    type="number"
                    min="1"
                    max="60"
                    value={exportState.settings.retryDelay}
                    onChange={(e) => handleSettingChange('retryDelay', parseInt(e.target.value) || 5)}
                  />
                </div>

                <div className="space-y-2">
                  <Label>최대 기록 보관 개수</Label>
                  <Input
                    type="number"
                    min="10"
                    max="500"
                    value={exportState.settings.maxHistoryItems}
                    onChange={(e) => handleSettingChange('maxHistoryItems', parseInt(e.target.value) || 100)}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* History Tab */}
        <TabsContent value="history" className="space-y-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-base">내보내기 기록</CardTitle>
                  <CardDescription>
                    {historyCount}개의 PDF 내보내기 기록이 있습니다.
                    총 용량: {formatFileSize(getTotalHistorySize())}
                  </CardDescription>
                </div>
                
                <Button
                  variant="outline"
                  onClick={clearHistory}
                  disabled={historyCount === 0}
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  전체 삭제
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {history.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <History className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>아직 내보내기 기록이 없습니다.</p>
                </div>
              ) : (
                <div className="space-y-2">
                  {history.slice(0, 10).map((item) => (
                    <div
                      key={item.id}
                      className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50"
                    >
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2">
                          <FileText className="w-4 h-4 flex-shrink-0" />
                          <span className="font-medium truncate">{item.title}</span>
                          <Badge variant="outline" className="text-xs">
                            {item.pages}페이지
                          </Badge>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">
                          {formatDate(item.exportedAt)} • {formatFileSize(item.fileSize)} • {item.generationTime.toFixed(1)}초
                        </div>
                      </div>

                      <div className="flex items-center space-x-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => downloadFromHistory(item.id)}
                          disabled={!item.downloadUrl}
                        >
                          <Download className="w-4 h-4" />
                        </Button>
                        
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => deleteHistoryItem(item.id)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  {history.length > 10 && (
                    <div className="text-center pt-4">
                      <Button variant="outline" size="sm">
                        더 보기 (+{history.length - 10}개)
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Performance Tab */}
        <TabsContent value="performance" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-base">성능 최적화</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={defaultOptions.enableOptimization}
                    onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'enableOptimization': checked })))}
                  />
                  <Label>PDF 최적화 사용</Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    checked={defaultOptions.compressImages}
                    onCheckedChange={(checked) => setDefaultOptions((prev: any) => ({ ...prev, 'compressImages': checked })))}
                  />
                  <Label>이미지 압축</Label>
                </div>
              </div>

              <div className="space-y-2">
                <Label>기본 DPI 설정</Label>
                <Select
                  value={defaultOptions.dpi.toString()}
                  onValueChange={(value) => setDefaultOptions((prev: any) => ({ ...prev, 'dpi', parseInt(value) as PDFExportOptions['dpi'])}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="72">72 DPI (웹용, 빠름)</SelectItem>
                    <SelectItem value="96">96 DPI (표준)</SelectItem>
                    <SelectItem value="150">150 DPI (고품질)</SelectItem>
                    <SelectItem value="300">300 DPI (인쇄용, 느림)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          <Alert>
            <Info className="h-4 w-4" />
            <AlertDescription>
              <div className="space-y-1">
                <div><strong>성능 팁:</strong></div>
                <div>• 높은 DPI 설정은 파일 크기와 생성 시간을 증가시킵니다</div>
                <div>• 이미지 압축을 사용하면 파일 크기를 줄일 수 있습니다</div>
                <div>• PDF 최적화는 생성 시간을 약간 증가시키지만 파일 크기를 줄입니다</div>
              </div>
            </AlertDescription>
          </Alert>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default PDFSettings