# Docker Compose configuration for E2E testing
# Provides full test infrastructure with backend services

version: '3.8'

services:
  # Next.js Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: dependencies
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    command: ["npm", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - test-network

  # Mock Backend Services for Testing
  mock-transcription:
    image: wiremock/wiremock:2.35.0
    ports:
      - "8000:8080"
    volumes:
      - ./tests/mocks/transcription:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - test-network

  mock-analysis:
    image: wiremock/wiremock:2.35.0
    ports:
      - "8001:8080"
    volumes:
      - ./tests/mocks/analysis:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - test-network

  mock-reports:
    image: wiremock/wiremock:2.35.0
    ports:
      - "8002:8080"
    volumes:
      - ./tests/mocks/reports:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - test-network

  # Nginx Proxy (mimics production setup)
  nginx:
    image: nginx:1.24-alpine
    ports:
      - "80:80"
    volumes:
      - ./tests/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      mock-transcription:
        condition: service_started
      mock-analysis:
        condition: service_started
      mock-reports:
        condition: service_started
    networks:
      - test-network

  # Playwright Test Runner
  e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test-runner
    environment:
      - BASE_URL=http://nginx
      - CI=true
      - PLAYWRIGHT_HTML_REPORT=test-results/html-report
    volumes:
      - ./test-results:/app/test-results
      - ./tests:/app/tests
    depends_on:
      nginx:
        condition: service_started
    networks:
      - test-network
    command: ["npm", "run", "test"]

networks:
  test-network:
    driver: bridge

volumes:
  test-results: